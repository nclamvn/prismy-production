# ===============================================
# Docker Compose for Prismy Production Stack
# Complete orchestration with all services
# ===============================================

version: '3.8'

services:
  # ===============================================
  # Main Application Service
  # ===============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${GIT_COMMIT:-$(git rev-parse HEAD)}
        VERSION: ${VERSION:-latest}
    container_name: prismy-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - nginx
    networks:
      - prismy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prismy.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.prismy.tls=true"
      - "traefik.http.routers.prismy.tls.certresolver=letsencrypt"

  # ===============================================
  # PostgreSQL Database
  # ===============================================
  postgres:
    image: postgres:16-alpine
    container_name: prismy-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-prismy}
      POSTGRES_USER: ${POSTGRES_USER:-prismy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/database/setup-security.sql:/docker-entrypoint-initdb.d/setup-security.sql
      - ./config/database/setup-analytics.sql:/docker-entrypoint-initdb.d/setup-analytics.sql
      - ./config/database/setup-api-webhooks.sql:/docker-entrypoint-initdb.d/setup-api-webhooks.sql
    ports:
      - "5432:5432"
    networks:
      - prismy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-prismy} -d ${POSTGRES_DB:-prismy}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ===============================================
  # Redis Cache & Session Store
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: prismy-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - prismy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ===============================================
  # Nginx Reverse Proxy & Load Balancer
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: prismy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites-available:/etc/nginx/sites-available
      - ./config/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - prismy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ===============================================
  # Background Job Processing
  # ===============================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: prismy-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - app_logs:/app/logs
      - worker_data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - prismy-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===============================================
  # Monitoring Stack
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prismy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - prismy-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: prismy-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - prismy-network
    restart: unless-stopped

  # ===============================================
  # Log Aggregation
  # ===============================================
  loki:
    image: grafana/loki:latest
    container_name: prismy-loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - prismy-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: prismy-promtail
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml
      - app_logs:/var/log/app
      - nginx_logs:/var/log/nginx
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - prismy-network
    restart: unless-stopped

# ===============================================
# Networks
# ===============================================
networks:
  prismy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===============================================
# Volumes
# ===============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  worker_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local