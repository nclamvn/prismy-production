# ==========================================
# PRISMY ZERO-CHAOS QA SUITE
# All quality gates must pass before merge
# ==========================================

name: QA_SUITE

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

jobs:
  # ==========================================
  # 1. CODE QUALITY (FAST)
  # ==========================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔍 ESLint
        run: npm run lint
        
      - name: 💅 Prettier check
        run: npm run format:check
        
      - name: 📝 TypeScript check
        run: npm run type-check

  # ==========================================
  # 2. UNIT TESTING (PARALLEL)
  # ==========================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🧪 Run unit tests with coverage
        run: npm run test:coverage
        
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: 📈 Coverage gate (80% minimum)
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage below 80%"
            exit 1
          fi
          echo "✅ Coverage above 80%"

  # ==========================================
  # 3. CONTRACT TESTING (API MOCKS)
  # ==========================================
  contract-tests:
    name: 🤝 Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🤝 Run contract tests with MSW
        run: npm run test:contract
        env:
          MSW_ENABLED: true

  # ==========================================
  # 4. BUILD VERIFICATION
  # ==========================================
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: .next/
          retention-days: 1

  # ==========================================
  # 5. E2E TESTING (CRITICAL FLOWS)
  # ==========================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    
    strategy:
      matrix:
        browser: [chromium, firefox]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next/
          
      - name: 🎭 Install Playwright
        run: npx playwright install ${{ matrix.browser }}
        
      - name: 🐳 Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
          
      - name: 🧪 Wait for services health check
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
          
      - name: 🎭 Run E2E tests
        run: npm run test:e2e -- --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7
          
      - name: 🛑 Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # ==========================================
  # 6. VISUAL REGRESSION (PERCY)
  # ==========================================
  visual-tests:
    name: 👀 Visual Regression
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next/
          
      - name: 📖 Build Storybook
        run: npm run build-storybook
        
      - name: 📸 Percy snapshots
        run: npx percy storybook ./storybook-static
        env:
          PERCY_TOKEN: ${{ env.PERCY_TOKEN }}

  # ==========================================
  # 7. SECURITY SCANNING
  # ==========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔍 npm audit
        run: npm audit --audit-level moderate
        
      - name: 🛡️ CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ==========================================
  # 8. FINAL GATE (ALL MUST PASS)
  # ==========================================
  qa-gate:
    name: ✅ QA Gate
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, contract-tests, build, e2e-tests, visual-tests, security]
    if: always()
    
    steps:
      - name: 🔍 Check all jobs status
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Contract Tests: ${{ needs.contract-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Visual Tests: ${{ needs.visual-tests.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [[ "${{ needs.quality.result }}" != "success" || 
                "${{ needs.unit-tests.result }}" != "success" || 
                "${{ needs.contract-tests.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.e2e-tests.result }}" != "success" || 
                "${{ needs.visual-tests.result }}" != "success" || 
                "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ QA Gate FAILED - One or more checks failed"
            exit 1
          fi
          
          echo "✅ QA Gate PASSED - All checks successful!"
          
      - name: 📊 Post summary
        run: |
          echo "## 🎉 QA Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Contract Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for production promotion! 🚀**" >> $GITHUB_STEP_SUMMARY