# ===============================================
# Pull Request Quality Checks
# Fast feedback for code quality
# ===============================================

name: PR Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===============================================
  # Quick Validation
  # ===============================================
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint check
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Format check
        run: pnpm format:check

      - name: Build check
        run: pnpm build

  # ===============================================
  # Fast Tests
  # ===============================================
  test:
    name: Fast Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prismy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/prismy_test" >> .env.test

      - name: Run unit tests
        run: pnpm test:unit --passWithNoTests
        env:
          NODE_ENV: test

      - name: Run affected tests
        run: |
          # Only run tests for changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(ts|tsx|js|jsx)$' | head -20)
          if [ ! -z "$CHANGED_FILES" ]; then
            echo "Running tests for changed files: $CHANGED_FILES"
            pnpm test:unit --passWithNoTests --findRelatedTests $CHANGED_FILES
          fi
        env:
          NODE_ENV: test

  # ===============================================
  # Security Check
  # ===============================================
  security:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # ===============================================
  # Performance Check
  # ===============================================
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Bundle analysis
        run: |
          # Analyze bundle size
          pnpm analyze

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ===============================================
  # Accessibility Check
  # ===============================================
  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: contains(github.event.pull_request.labels.*.name, 'accessibility')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Pa11y accessibility test
        run: |
          pnpm start &
          sleep 10
          npx pa11y http://localhost:3000 --reporter cli
          npx pa11y http://localhost:3000/dashboard --reporter cli

  # ===============================================
  # Database Migration Check
  # ===============================================
  migration:
    name: Migration Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: contains(github.event.pull_request.changed_files, 'migrations/')

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prismy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test migrations
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/prismy_test"
          
          # Test migration up
          pnpm db:migrate
          
          # Test migration down (if supported)
          # pnpm db:migrate:down
          
          # Test migration idempotency
          pnpm db:migrate

  # ===============================================
  # Docker Build Test
  # ===============================================
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(github.event.pull_request.changed_files, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'docker-compose')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker compose
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.yml build

  # ===============================================
  # Infrastructure Validation
  # ===============================================
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: contains(github.event.pull_request.changed_files, 'infrastructure/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: Terraform fmt check
        run: |
          cd infrastructure/terraform
          terraform fmt -check

      - name: Terraform validate
        run: |
          cd infrastructure/terraform
          terraform init -backend=false
          terraform validate

      - name: Terraform security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform

  # ===============================================
  # API Contract Testing
  # ===============================================
  api-contract:
    name: API Contract Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(github.event.pull_request.changed_files, 'app/api/')

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prismy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/prismy_test" >> .env.test

      - name: Run API tests
        run: pnpm test:api
        env:
          NODE_ENV: test

  # ===============================================
  # Comment PR Results
  # ===============================================
  comment:
    name: Comment Results
    runs-on: ubuntu-latest
    needs: [validate, test, security]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## PR Checks Results')
            );

            const results = {
              validate: '${{ needs.validate.result }}',
              test: '${{ needs.test.result }}',
              security: '${{ needs.security.result }}'
            };

            const statusEmoji = {
              success: '✅',
              failure: '❌',
              cancelled: '⏸️',
              skipped: '⏭️'
            };

            const body = `## PR Checks Results

            | Check | Status |
            |-------|--------|
            | Validation | ${statusEmoji[results.validate] || '❓'} ${results.validate} |
            | Tests | ${statusEmoji[results.test] || '❓'} ${results.test} |
            | Security | ${statusEmoji[results.security] || '❓'} ${results.security} |

            ${Object.values(results).every(r => r === 'success') 
              ? '🎉 All checks passed! Ready for review.' 
              : '⚠️ Some checks failed. Please review and fix issues.'}

            <sub>Updated at ${new Date().toISOString()}</sub>
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }