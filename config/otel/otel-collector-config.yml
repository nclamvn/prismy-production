# ===============================================
# OpenTelemetry Collector Configuration
# Unified collection of traces, metrics, and logs
# ===============================================

receivers:
  # OTLP receiver for traces and metrics
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        
  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
            
  # Jaeger receiver for legacy support
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_binary:
        endpoint: 0.0.0.0:6832
      thrift_compact:
        endpoint: 0.0.0.0:6831
      thrift_http:
        endpoint: 0.0.0.0:14268
        
  # Zipkin receiver for legacy support
  zipkin:
    endpoint: 0.0.0.0:9411
    
  # Host metrics receiver
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
      memory:
      network:
      process:
      processes:
      
  # Docker stats receiver
  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 10s
    
  # File log receiver
  filelog:
    include: ["/var/log/prismy/*.log"]
    start_at: beginning
    operators:
      - type: json_parser
        timestamp:
          parse_from: attributes.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%fZ'
      - type: move
        from: attributes.level
        to: severity

processors:
  # Batch processor for efficiency
  batch:
    send_batch_size: 10000
    timeout: 10s
    send_batch_max_size: 11000
    
  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_percentage: 75
    spike_limit_percentage: 15
    
  # Resource processor for adding metadata
  resource:
    attributes:
      - key: service.name
        value: prismy
        action: insert
      - key: deployment.environment
        value: production
        action: insert
      - key: service.version
        from_attribute: app.version
        action: insert
        
  # Attributes processor for data enrichment
  attributes:
    actions:
      - key: http.user_agent
        action: delete
      - key: http.request.header.authorization
        action: delete
      - key: db.statement
        action: hash
        
  # Span processor for trace processing
  span:
    name:
      to_attributes:
        rules:
          - ^(?P<operation_name>.*)$
    status:
      code: Error
      description: "The span failed"
      
  # Metrics transform processor
  metricstransform:
    transforms:
      - include: prismy.translation.duration
        match_type: strict
        action: update
        operations:
          - action: add_label
            new_label: environment
          - action: aggregate_labels
            label_set: [service.name, environment]
            aggregation_type: sum
            
  # Filter processor for reducing noise
  filter:
    error_mode: ignore
    traces:
      span:
        - 'attributes["http.route"] == "/health"'
        - 'attributes["http.route"] == "/metrics"'
    metrics:
      metric:
        - 'name == "prometheus.rule.evaluation.duration.seconds"'
    logs:
      log_record:
        - 'attributes["log.file.path"] == "/var/log/debug.log"'

exporters:
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: prismy
    const_labels:
      environment: production
    send_timestamps: true
    metric_expiration: 5m
    enable_open_metrics: true
    
  # Tempo exporter for traces
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
      
  # Loki exporter for logs
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    tenant_id: prismy
    labels:
      attributes:
        service.name: "service_name"
        service.instance.id: "service_instance_id"
        severity: "severity"
        
  # Jaeger exporter for traces (backup)
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
      
  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200
    
  # AWS X-Ray exporter (if using AWS)
  awsxray:
    region: us-east-1
    no_verify_ssl: false
    local_mode: false

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    
  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777
    
  # ZPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679
    
  # Memory ballast for performance
  memory_ballast:
    size_in_percentage: 20

service:
  # Extensions to enable
  extensions: [health_check, pprof, zpages, memory_ballast]
  
  # Pipelines configuration
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, resource, span, filter, batch]
      exporters: [otlp/tempo, jaeger, debug]
      
    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics, docker_stats]
      processors: [memory_limiter, resource, metricstransform, filter, batch]
      exporters: [prometheus, debug]
      
    # Logs pipeline
    logs:
      receivers: [otlp, filelog]
      processors: [memory_limiter, resource, attributes, filter, batch]
      exporters: [loki, debug]
      
  # Telemetry configuration
  telemetry:
    logs:
      level: info
      initial_fields:
        service: otel-collector
    metrics:
      level: detailed
      address: 0.0.0.0:8888