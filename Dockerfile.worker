# Background Worker Dockerfile for Prismy
# Optimized for job processing and background tasks

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# ===============================================
# Dependencies Stage
# ===============================================
FROM base AS deps

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force

# ===============================================
# Builder Stage
# ===============================================
FROM base AS builder

WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Install dev dependencies and build
RUN npm ci --include=dev --no-audit --no-fund
RUN npm run build:worker

# ===============================================
# Runner Stage
# ===============================================
FROM base AS runner

ENV NODE_ENV=production

# Create app user
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 worker

WORKDIR /app

# Copy built application
COPY --from=builder --chown=worker:nodejs /app/dist ./dist
COPY --from=builder --chown=worker:nodejs /app/package.json ./package.json
COPY --from=deps --chown=worker:nodejs /app/node_modules ./node_modules

# Worker specific files
COPY --chown=worker:nodejs <<'EOF' /app/worker.js
const { Worker } = require('worker_threads');
const path = require('path');

// Health check endpoint for worker
const http = require('http');
const server = http.createServer((req, res) => {
  if (req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString() }));
  } else {
    res.writeHead(404);
    res.end();
  }
});

server.listen(3001, () => {
  console.log('Worker health check server listening on port 3001');
});

// Start worker processes
const workerPath = path.join(__dirname, 'dist/worker/index.js');

function startWorker() {
  const worker = new Worker(workerPath);
  
  worker.on('message', (message) => {
    console.log('Worker message:', message);
  });
  
  worker.on('error', (error) => {
    console.error('Worker error:', error);
    // Restart worker on error
    setTimeout(startWorker, 5000);
  });
  
  worker.on('exit', (code) => {
    console.log(`Worker exited with code ${code}`);
    if (code !== 0) {
      setTimeout(startWorker, 5000);
    }
  });
}

// Start multiple workers based on CPU cores
const numCPUs = require('os').cpus().length;
const numWorkers = Math.min(numCPUs, 4); // Max 4 workers

for (let i = 0; i < numWorkers; i++) {
  startWorker();
}

console.log(`Started ${numWorkers} worker processes`);

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('Received SIGTERM, shutting down gracefully');
  server.close(() => {
    process.exit(0);
  });
});
EOF

# Health check script
COPY --chown=worker:nodejs <<'EOF' /app/healthcheck.js
const http = require('http');

const options = {
  hostname: 'localhost',
  port: 3001,
  path: '/health',
  method: 'GET',
  timeout: 5000
};

const req = http.request(options, (res) => {
  if (res.statusCode === 200) {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

req.on('error', () => process.exit(1));
req.on('timeout', () => {
  req.destroy();
  process.exit(1);
});

req.end();
EOF

# Switch to worker user
USER worker

# Expose health check port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node /app/healthcheck.js

# Start the worker
CMD ["node", "worker.js"]